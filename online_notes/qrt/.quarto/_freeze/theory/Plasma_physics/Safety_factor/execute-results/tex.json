{
  "hash": "1b62ae05b664bfb172dc2da4a52c6614",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Safety Factor q\"\noutput: html_document\ncode-fold: false\ncode-summary: \"Show/Hide Code\"\njupyter: python3\n---\n\nThe safety factor $q$ expresses the number of toroidal turns a magnetic field line makes for each poloidal turn in a toroidal confinement device, such as a tokamak.\n\nIt corresponds to the flux-surface averaged local pitch:\n\n$$\nq(\\psi) \\equiv \\langle q_l \\rangle_{\\varphi, \\theta} = \\left\\langle \\frac{r B_{\\varphi}}{R B_{\\theta}}  \\right\\rangle_{\\varphi, \\theta}\n$$\n\nwhere $r$ is the minor radius coordinate, $B_{\\varphi}$ is the toroidal magnetic field component, $R$ is the major radius, and $B_{\\theta}$ is the poloidal magnetic field component.\nA higher safety factor generally indicates greater stability against certain plasma instabilities.\n\n![Example of safety factor behaviour in a TCV shot](Figures/safety_factor.png)\n\nWith some assumptions, it is possible to estimate the safety factor behavior in a tokamak: \n\n$$\n B_{\\varphi} \\approx \\frac{\\mu_0}{2\\pi R} I_{coils};\n$$\n\n$$\n B_{\\theta} \\approx \\frac{\\mu_0}{2\\pi r} I_p = \\frac{\\mu_0}{2} J_p r;\n$$\n\n$$\n\\rightarrow q(\\psi) = \\left\\langle\\frac{I_{coils}}{\\pi R^2 J_p }\\right\\rangle_{\\varphi, \\theta}.\n$$\n\n### Interactive Plot of Magnetic Field\n\nBelow is an interactive plot that allows you to modify the minor and major radii of the toroidal confinement device to observe how the safety factor changes.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport ipywidgets as widgets\nfrom IPython.display import display\n\n# Constants\nR0 = 0.88\nJp = 1 * 10**6  # Plasma current\nI_coils = 1 * 10**6 \n\n# Define R function\ndef R(r, theta):\n    return R0 + r * np.cos(theta)\n\n# Define the interactive function\ndef plot_interactive(major_radius=0.88, minor_radius=0.25):\n    rr = np.linspace(0, minor_radius, 150)  # Range for r\n    thetaa = np.linspace(0, 2 * np.pi, 100)  # Range for theta\n\n    # Create meshgrid for r and theta\n    R_mesh, Theta_mesh = np.meshgrid(rr, thetaa)\n\n    # Calculate corresponding values of Q on the meshgrid\n    Q_mesh = I_coils / Jp / (np.pi * R(R_mesh, Theta_mesh)**2)\n\n    # Plot the calculated values of Q\n    Q_int = 1 / (2 * np.pi) * np.sum(Q_mesh, axis=1)\n\n    # Create figure 1 (integration plot)\n    plt.figure(figsize=(10, 6))\n    plt.plot(rr, Q_int)\n    plt.title('Integrated Q vs r')\n    plt.xlabel('r')\n    plt.ylabel('Q')\n\n    # Create figure 2 (surface plot)\n    plt.figure(figsize=(10, 6))\n    ax = plt.axes(projection='3d')\n    ax.plot_surface(R_mesh, Theta_mesh, Q_mesh, cmap='viridis')\n    ax.set_xlabel('r')\n    ax.set_ylabel('theta')\n    ax.set_zlabel('Q')\n    ax.set_title('Surface Plot of Q')\n    plt.show()\n\n# Create interactive widgets\nwidgets.interactive(plot_interactive, major_radius=widgets.FloatSlider(value=R0, min=0.1, max=2.0, step=0.01, description='Major Radius (R0):'), \n                    minor_radius=widgets.FloatSlider(value=0.25, min=0.1, max=1.0, step=0.01, description='Minor Radius (r):'))\n\n",
    "supporting": [
      "Safety_factor_files\\figure-pdf"
    ],
    "filters": []
  }
}