---
title: "Covariant and Contravariant"
format:
  html:
    interactive: true
execute:
  echo: false      # hide code
  warning: false
  message: false
jupyter: python3
---

When describing a vector $\mathbf{\vec{V}}$ through its components, we have two possible choices:

1. **Covariant components**: These transform in the same way as the basis vectors under a change of coordinates.
2. **Contravariant components**: These transform in the opposite way to the basis vectors under a change of coordinates.

The distinction is important in tensor analysis and differential geometry, where the transformation properties of objects under coordinate changes determine their classification as covariant or contravariant.

```{python}

#| echo: false
#| fig-cap: "Contravariant (left) and covariant (right) components of $\\vec{V}$."
#| fig-width: 10
#| fig-height: 6

import numpy as np
import matplotlib.pyplot as plt
import ipywidgets as widgets
from IPython.display import display

# Define the vector components
e1 = np.array([2.5, 0.5])
e2 = np.array([0.5, 2.5])
e11y = 2.5
e11x = -e1[1]*e11y/e1[0]
e11 = np.array([e11x, e11y])
e22x = 2.5
e22y = -e2[0]*e22x/e2[1]
e22 = np.array([e22x, e22y])


v1 = 0.5
v2 = 0.5
vec = v1*e1 + v2*e2

v11 = vec @ e1 / np.linalg.norm(e1)
theta1 = np.acos(e1[0]/np.linalg.norm(e1))
v11x = v11*np.cos(theta1)
v11y = v11*np.sin(theta1)
v22 = vec @ e2 / np.linalg.norm(e2)
theta2 = np.acos(e2[0]/np.linalg.norm(e2))
v22x = v22*np.cos(theta2)
v22y = v22*np.sin(theta2)

A = np.column_stack([e11, e22])
alpha, beta = np.linalg.solve(A,vec)

v111x = alpha*e11x
v111y = alpha*e11y
v222x = beta*e22x
v222y = beta*e22y

# Create a figure and axis
fig, ax = plt.subplots(1,2,figsize=(10, 10))

# Plot the vector from origin
ax[0].quiver(0, 0, e1[0], e1[1], angles='xy', scale_units='xy', scale=1, color='k', label=r'$\vec{e_1}$')
ax[0].quiver(0, 0, e2[0], e2[1], angles='xy', scale_units='xy', scale=1, color='k', label=r'$\vec{e_2}$')

ax[0].quiver(0, 0, vec[0], vec[1], angles='xy', scale_units='xy', scale=1, color='g', label=r'$\vec{V}$')

ax[0].quiver(0, 0, v1*e1[0], v1*e1[1], angles='xy', scale_units='xy', scale=1, color='r', label='$V^1$')
ax[0].quiver(0, 0, v2*e2[0], v2*e2[1], angles='xy', scale_units='xy', scale=1, color='r', label='$V^2$')

ax[0].plot([vec[0],v2*e2[0]], [vec[1], v2*e2[1]], 'k--' )
ax[0].plot([vec[0],v1*e1[0]], [vec[1], v1*e1[1]], 'k--' )

ax[0].set_title(r'Contravariant components of the vector $\vec{V}$')

# Second subplot

ax[1].quiver(0, 0, e1[0], e1[1], angles='xy', scale_units='xy', scale=1, color='k', label=r'$\vec{e_1}$',alpha = 0.2)
ax[1].quiver(0, 0, e2[0], e2[1], angles='xy', scale_units='xy', scale=1, color='k', label=r'$\vec{e_2}$',alpha = 0.2)

ax[1].quiver(0, 0, vec[0], vec[1], angles='xy', scale_units='xy', scale=1, color='g', label=r'$\vec{V}$')

ax[1].quiver(0, 0, v11x, v11y, angles='xy', scale_units='xy', scale=1, color='r', alpha = 0.2)
ax[1].quiver(0, 0, v22x, v22y, angles='xy', scale_units='xy', scale=1, color='r',alpha = 0.2)

ax[1].quiver(0, 0, e22[0], e22[1], angles='xy', scale_units='xy', scale=1, color='k', label=r'$\vec{e}^2$')
ax[1].quiver(0, 0, e11[0], e11[1], angles='xy', scale_units='xy', scale=1, color='k', label=r'$\vec{e}^2$')

ax[1].plot([vec[0],v222x], [vec[1], v222y], 'k--' )
ax[1].plot([vec[0],v111x], [vec[1], v111y], 'k--' )

ax[1].quiver(0, 0, v111x, v111y, angles='xy', scale_units='xy', scale=1, color='r', label='$V_1$')
ax[1].quiver(0, 0, v222x, v222y, angles='xy', scale_units='xy', scale=1, color='r', label='$V_2$')

ax[1].set_title(r'Covariant components of the vector $\vec{V}$')

# Set axis limits and properties for all axes
for axis in ax.flat:
    axis.set_xlabel('x')
    axis.set_ylabel('y')
    axis.set_xlim(-1, 3)
    axis.set_ylim(-1, 3)
    axis.grid(True)
    axis.set_aspect('equal')
    axis.legend()

plt.show()



```
